generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SurveyLink {
  id          Int             @id @default(autoincrement())
  uniqueCode  String          @unique
  clientName  String
  companyName String
  clientEmail String?
  createdAt   DateTime        @default(now())
  createdById String?
  createdBy   User?           @relation(fields: [createdById], references: [id])
  response    SurveyResponse?
}

model SurveyResponse {
  id                Int        @id @default(autoincrement())
  linkId            Int        @unique
  nps               Int?
  communication     Int?
  completed         Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  expectationMet    Boolean?
  potentialReferral String?
  feedback          String?
  link              SurveyLink @relation(fields: [linkId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  surveyLinks   SurveyLink[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id         String    @id @default(cuid())
  employeeId String    @unique
  firstName  String
  lastName   String
  email      String?
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([startDate, endDate])
  @@index([isActive])
}

model EmployeeDataSync {
  id             String    @id @default(cuid())
  syncDate       DateTime  @default(now())
  success        Boolean
  message        String?
  recordsAdded   Int       @default(0)
  recordsUpdated Int       @default(0)
  apiKeyStatus   String    @default("unknown")
  apiKeyExpiry   DateTime?

  @@index([syncDate])
}
